/*Responsible for our body background and formatting*/
body {
    background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);

    /*You can change the font-family of text, to make it look different from the default font of your browser.*/
    /*This change will affect all parts of the text inside of the body when placed in the body*/
    font-family: sans-serif;

    /*To create a little more room around the menu, add 20px of space on the inside of the body element */
    /*by using the padding property.*/
    padding: 20px;
}


/*To remove some of the vertical space between the h1 element and the text Est. 2020, */
/*change the bottom margin of the h1 to 15px.*/
h1{
    font-size: 40px;
    margin-top: 0;

    margin-bottom: 15px;
}

h2{
    font-size: 30px;
}


/*
You now have three type selectors with the exact same styling.
You can add the same group of styles to many elements by creating a list of selectors.
Each selector is separated with commas like this:
     selector1, selector2 {
         property: value;
     }
*/
.established{
    font-style: italic;
}


h1, h2, p {
    text-align: center;
}



/*Add another style to the file that changes the background-color */
/*property to brown for the body element.*/
/*body{*/
/*    background-color: burlywood;*/
/*}*/


/*So far you have been using type selectors to style elements:

 div{

 }

A class selector is defined by a name with a dot directly in front of it, like this:
.class-name {
  styles
}

 */
.menu {
    /*Width can be declared as both pixel width (i.e. 300 px width) or a percentyage of a given*/
    /*area (i.e. 80% of the div width).*/
    width: 80%;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;

    /*You can give your menu some space between the content and the sides with */
    /*various padding properties.*/
    /*padding-left:20px;*/
    /*padding-right: 20px;*/
    /*padding-top: 20px;*/
    /*padding-bottom: 20px;*/

    /*The current width of the menu will always take up 80% of the body element's */
    /*width. On a very wide screen, the coffee and dessert appear far apart from their prices.*/
    max-width: 500px;

    padding: 20px;

}


/*
The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements.

To make the image behave like heading elements (which are block-level), create an img type selector and use the value block
for the display property and use the applicable margin-left and margin-right values to center it horizontally.

*/
img{
    display: block;
    margin-left: auto;
    margin-right: auto;

    /*It would be nice if the vertical space between the h2 elements and their associated icons was smaller.*/
    /*The h2 elements have default top and bottom margin space. Add a negative top margin to the img elements */
    /*to pull them up from their current positions. Negative values are created using a - in front of the value.*/
    /*            ↓↓↓                                                         */
    margin-top: -25px;
}

/*The default properties of an hr element will make it appear as a thin light grey line. */
/*You can change the height of the line by specifying a value for the height property.*/
/*By  default there will be gray border around the divider bar. This border can be customized as well and simply using*/
/*the border-color property to edit it.*/
hr{
    height: 2px;
    background: brown;

    /*Notice how the thickness of the line looks bigger? */
    /*The default value of a property named border-width is 1px for all edges of hr elements.*/
    /*making the border the same color as the divider itself will create a combine divider height */
    /*of the line is 5px (3px plus the top and bottom border width of 1px).*/
    border-color: brown;
}

/*Changing the margin-bottom to 5px looks great. However, now the space between the Cinnamon Roll */
/*menu item and the second hr element does not match the space between the top hr element and the Coffee heading.*/

.bottom-line{
    margin-top:25px;
}



/*We only want the title not the individual elements below to contain (prices and desserts to have impact font)*/
h1, h2{
    /*You can add a fallback value for the font-family by adding another font name separated by a comma.
    Fallbacks are used in instances where the initial is not found/available.
                           ↓
    */
    font-family: Impact, serif;
}



/*The p elements are nested in an article element with the class attribute of item. */
/*You can style all the p elements nested anywhere in elements with a class named item like this:*/
.item p {

    /*############### First Step (what we initially tried) #########################*/
    /*That's closer, but the price didn't stay over on the right.*/
    /*This is because inline-block elements only take up the width of their content. To spread */
    /*them out, add a width property to the flavor and price class selectors that have a value */
    /*of 50% each.*/

    /*############### Our Actual Fix ##########################*/
    /*Styling the p elements as inline-block and placing them on separate lines in the code creates */
    /*an extra space to the right of the first p element, causing the second one to shift to the next line. */
    /*One way to fix this is to make each p element's width a little less than 50%.*/
    display: inline-block;

    /*Focusing on the menu items and prices, there is a fairly large gap between each line.*/
    margin-top: 5px;
    margin-bottom: 5px;
    font-size: 18px;
}

.flavor, .dessert {
    /* Check Actual fix changed from 50% -> 49% -> 50% after setting elements p on same line  */
    text-align: left;
    width: 75%;
}

.price {
    text-align: right;
    width: 25%;
    font-size: 18px;
}

/*FOOTER */

footer{
    font-size: 14px;
}



/*To decrease the default margin space below the address p element, create a class selector named address*/
/*and use the value 5px for the margin-bottom property.*/
.address{
    margin-bottom: 5px;
}




/*The default color of a link that has not yet been clicked on is typically blue. The default color of a*/
/*link that has already been visited from a page is typically purple. To make the footer links the same*/
/*color regardless if a link has been visited, use a type selector for the anchor element (a) and use*/
/*black for the color property.*/

a{
   color: black;
}

/*You change properties of a link when the link has actually been visited by using a pseudo-selector*/
/*that looks like a:visited { propertyName: propertyValue; }. */
/*Check out for more info: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes*/
a:visited {
    color:gray;
}

/*Change properties of a link when the mouse hovers over them

   ↓ ↓                                      */
a:hover{
    color:brown;
}

/*Change properties of a link when the link is actually being clicked
   ≈                                  */
a:active{
    color:white;
}

